Calorify


A Semantic Web Application




Every sport counts
  



Video: https://vimeo.com/143362500
Source code: https://github.com/mastermarek/Final_project










By Tycho Atsma, Marek v/d Hoeven & Mitchell Kuin






Introduction
During the first week of the final project our group decided on combining sports and nutrition for our web application. During this week we set out our goal of the application, the functionalities that would be implemented, the technologies that were going to be used and the ontologies we’re expecting to use.  However, after milestone 1 we changed our mind about the application and it seemed important to explain what we had in mind the first time, what we changed and how:
(First) goal of the application 
In our first version of the  application we wanted to focus on sport and food (diet). Users would be able to see what they needed to eat, in terms of nutritional value, per week for a particular sport. So we wanted to combine three separate ontologies: sport, food-nutritions  and human. Our main goal was (and still is) to stimulate today’s society to live more healthy and to help them achieve their goals. Our application would provide information at a much lower cost than nutrition specialists. Furthermore the application would support those whom want to become more aware of their nutrition. It didn’t really matter if the person wanted to lose weight or gain mass, it would be helpful for anyone who wanted to find the right nutrition to complement his or her sports schedule. 
Revised application description
However, we came across some bumps in the road. First of all, our plan was a little too ambitious with regard to the time we had for this project. The three of us didn’t really know too much about nutrition and to be able to create some sort of diet plan we needed to read loads of articles which is impossible in just about a week’s time. So we decided to numb down the nutrition’s content into calories which is more abstract and still gives some sort of advice. Each sport is now linked to the average amount of calories burned by exercising the sport for an hour (for a man with a weight of 80kg). Users can therefore see how many calories they can burn with each sport and maybe decide on that note which sport to exercise. 


Second of all, our focus as explained above was on person. Since we changed our application the focus shifts as well from person to sport. It’s no longer about personalized diet plans but more about the sports themselves and a person can find the perfect fit when he or she decides to pick up on a sport. 


In our first description of the application, the user was able to give a lot of input in which the application would match a proper diet plan. We figured it was more achievable to change the application into more of an information source or directory. As sort of beginners with this software, Protege and Stardog, and the newly learned programming language of SPARQL it seems to be a better idea to have a more straightforward application instead of a complex application which probably wouldn’t have been finished on time. The main function of the application will be for the user to easily find the calories burned per hour by exercising certain sports. It gives the user an indication of the intensity of sports and a way to compare different sports. 
Userbase
Our application  gives users the possibility to search for a specific sport, the categories to which a sport belongs and the amount of calories burned per hour of exercise. The application then returns the calories burned per hour per sport or gives a result of all the sports in a certain category. The user can divide the search results between ‘high intensity’ and ‘low intensity’ sports. High intensity sports are the sports where relatively a lot of calories are burned per hour (500 calories or more) of exercise whereas low intensity sports (> 500 calories) are the sports where a relatively low amount of calories are burned per hour of exercise. This might be useful for users who use the application with the goal of losing weight. They probably search for the ‘easiest’ way to lose weight and will search for the high intensity sports after which they can decide which sport they want to do
Our ontology
As mentioned before our ontology is made out of 3 ontologies:


* https://github.com/Tobion/Sports-Ontology (Sport)
* FOAF (Person)
* Nutrition


We tweaked and reused parts of these ontologies to fit our needs, because some of these ontologies contain several classes and / or individuals that are of no use regarding our ontology. We’ve created several sub-classes for the Sport ontology to improve the inferencing and categorize sports more specifically without making it too complex. 
These sub-classes are all not disjoints of eachother, because a sport can be in multiple sportcategories at once. Only the High and Low intensity categories are made disjoint of eachother.


The FOAF ontology is modified in such a way that only the class ‘Person’ is implemented in our own ontology, because other classes which came with the original FOAF were, as said above,  of no use. With object properties we define that only persons can practise a sport and in reverse that a sport can only be practiced by a person. We also created different kinds of data properties, because these were useful for when we defined to which category a certain sport belongs when added as an individual. 


The Nutrition ontology was the one which gave us the most struggles, because the ontology about nutrition that we found on dbpedia had way to many classes and subclasses. Some of these classes didn’t even have a  direct relation with Nutrition itself. 
This is why we decided to not reuse the dbpedia ontology, but to create our own nutrition ontology which derived from the dbpedia one. This way we had more time to create a more specific ontology which has more use to our application.
Inferencing
In our ontology new information is inferred. The first thing that is infered is whether an individual is a sport. It’s the most important inference made within our ontology. After our ontology infers something to be a sport the next inference made is to which category a sport belongs. This is mainly done by the defined data properties. After all of these inferences the final stage of inferencing consists of the inference to be a high intensity or a low intensity sport:


  

Image 1: Sub-classes of all sports


  

Image 2: Example: clicked on Endurancesport category →  shows the infered instances


Image 3: Inferencing of HighIntensitySport
  



Datasets
The application requires two kinds of data sources. The first data source we selected was easy to find and is widely known: dbpedia. We filtered and contructed with yasgui.org the dbpedia category: Sport. This gave us a list of the 99 most popular sports  in rdf, which we could add to our ontolgy.


These sports are very important for our application as the focus is all on sports and the calories burned per hour while exercising. However, during the first milestone it was all about the user whereas now it’s all about the sport. So our dbpedia’s importance has increased considering the changes we made. 


We needed a second data source to know the calories burned per hour for each sport. In our first milestone we wanted different kind of nutritions per sport, but as explained before this was not achievable. So our second data source will only consist of calories burned per hour for each sport (for a man with a weight of 80kg). We decided to create our own calories data source after hours of online searching in vain. 
Creating our own dataset
For each sport found in our sport-list made out of dbpedia we searched for the calories burned per hour for a man of 80 kg. We used http://www.caloriecalculator.nl/calorieen-per-activiteit/ as a reference. We added the right data-property to each sport-individual added by dbpedia. For example ‘basketball’ was getting the data-property: ‘UsesABall’ and ‘Swimming’ got the data-properties  ‘NeedsGoodCondition’ and ‘NeedsWater’. Furthermore, every sport that was added will get the data-property ‘CalorieUsagePerHour’ with the range set to the amount of calories found on the internet (http://www.caloriecalculator.nl/calorieen-per-activiteit/) . 
Thanks to the reasoner all the sport-individuals are now automatically put into a sub-class of ‘Sport’.
Building the application
After adding all our datasets and changing it to fit our needs, we built the application. First we tested if stardog  could deal with our ontology, so after creating a new database in stardog and adding our ontology we tried some query’s.  The most important query was to find a certain sport and return the amount of calories used per hour:
  



The next important query is to find all sports inside a  certain category, this query only works when the reasoning is set to ‘ON’ in stardog!
  



Extra functionality!
We decided we wanted to add an extra functionality to the application.  Because our dataset will be limited to only the +- 100 sport-individuals,  we wanted the user to be able to add their own sport.  Users can name a sport, add calories per hour and give it data-properties. A query needed to perform this kind of action looks like this:


  

Adding a sport named: SelfAddedSportName with calorie usage and a dataproperty set to True
Behind the scenes
How the application works, how data is presented to the user and what options the user gets are explained in this chapter without getting too technical. 


The application is presented to the user in the form of  webpage. There are a couple of things the user can notice when he/she enters the webpage where the application is located.
First of all, the front header. The goal of the front header is to immediately grab the attention of the user and make the user want to explore the application. The front header consists of a background, a title, a sub title and a search field. 


The background sets the theme of the application and gives the user the impression that the application is about sport. The search field is where the user can insert there search term, which has to be the name of a sport. The search term will be read by a function located in a javascript file. This function will also use this search term to generate a SPARQL query and send it to a stardog repository where our ontology is located. When the user has inserted the name of  a sport, the function will trigger and the application will return the returned results from the repository and present the amount of calories burnt by that specific sport to the user.


Giving the user the option to only search for sports by searching for names is not very extensive and that is why we also decided to give the user the possibility to choose from a range of filters. There are two types of filters: sportcategory and intensity.
The category filters can be useful if the user does not want to search for a specific sport, but for a range of sports who share the same characteristics. For instance, if the user likes soccer but wants to know more about sports where a ball plays an important role, the user can activate the Ball Sports filter and the application will return all the sports and their amount of burned calories that belong to the ball sport category. 
The content section of the page is divided in two parts: the filter and description part and the result part. The results are returned to the user as a list, but every list item is presented as a coloured circle with the name of the sport and a small circle attached to the big circle with the calories. This way the data seems more natural to the user and becomes easier to read.


When the user is not really interested in the type of sport but more in the intensity of sport, the user can make use of the intensity filters. The user can choose between high and low intensity sports. The intensity of a sport is determined by the amount of calories burned per hour. A sport has a high intensity when that amount is equal to or above 500 burned calories per hour. Everything below that number is a low intensity sport.
Choosing between the intensity of a sport might be useful for users who use the application with the goal of losing weight. They probably search for the ‘easiest’ way to lose weight and will search for the high intensity sports after which they can decide which sport they want to do.
Besides retrieving information from the stardog repository, the option to send data to the repository is also an option given to the user. So users can create their own sport and add this! 
Look up the source code (link is on the fontpage) to see all the code written.


Final word


In this chapter we’ll explain more about how the process of making the application went down, what can be improved and what we learned about the concept of the Semantic Web.
A project almost never procedes smoothly and so of course we had our own set of difficulties we came across. We had quite some problems with trying to understand the concept of the Semantic Web and how we could turn an idea into something real using ontologies (with Protege).  


The introduction of this paper also explains that we sort of renewed our entire project, because we made things too complicated. This was the first obstacle we ran in to, but we overcame the problem quite smoothly by really trying to understand what we did wrong and why. This way, things started to make more sense and we could move on a bit further by creating a ontology that worked with good inferencing and making a working application.
There are some things that we still don’t fully understand and can be improved, such as how we can make sure that the user doesn’t insert false data into the application, but those problems occur mostly where the extra functionality is located so it does not flaw the entire application. 
In conclusion, we have a working Semantic Web application about sports and nutrition and acquired more knowledge about the concept of the Semantic Web.